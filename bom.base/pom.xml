<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<groupId>cz.rkr</groupId>
	<artifactId>base</artifactId>
	<name>${project.groupId}.${project.artifactId}</name>
	<version>1.0</version>
	<packaging>pom</packaging>

	<description>Base artifact for my projects</description>
	<url>http://evyvoj.cz/site/</url>
	<inceptionYear>2014</inceptionYear>

	<properties>
		<maven.build.timestamp.format>yyyyMMdd'T'HHmmss</maven.build.timestamp.format>

		<!-- PROPERTIES SHOULD BE SET IN SUB-PROJECTS -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven.compiler.sourceLevel>1.8</maven.compiler.sourceLevel>
		<maven.compiler.debug>true</maven.compiler.debug>
		<maven.compiler.verbose>false</maven.compiler.verbose>

		<generated-source-dir>target/generated-sources</generated-source-dir>
		<repository-url>http://repository.evyvoj1.cz</repository-url>
		<repository-url-release>${repository-url}/artifactory/libs-release</repository-url-release>
		<repository-url-snapshots>${repository-url}/artifactory/libs-snapshot</repository-url-snapshots>
		<repository-url-plugins>${repository-url}/artifactory/plugins-release</repository-url-plugins>
	</properties>

	<!-- DODELAT TADY TO HRANI SI S PROPERTIES a nastaveni repository na mafioso -->

	<repositories>
		<repository>
			<!-- overriding maven central repo with id 'central' -->
			<id>mycentral</id>
			<name>libs-release</name>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
			<url>${repository-url-release}</url>
		</repository>
		<repository>
			<id>mysnapshots</id>
			<name>libs-snapshot</name>
			<snapshots />
			<url>${repository-url-snapshots}</url>
		</repository>
	</repositories>

	<distributionManagement>
		<repository>
			<id>releases</id>
			<url>${repository-url-release}-local</url>
		</repository>

		<snapshotRepository>
			<id>snapshots</id>
			<url>${repository-url-snapshots}-local</url>
		</snapshotRepository>
	</distributionManagement>

	<pluginRepositories>
		<pluginRepository>
			<id>mycentral</id>
			<name>plugins-repo</name>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
			<url>${repository-url-plugins}</url>
		</pluginRepository>
	</pluginRepositories>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>1.8</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>

			<!-- ====================================================================================== -->
			<!-- ======================= BUILDING plugins to create packages ========================== -->
			<!-- ====================================================================================== -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.3</version>
				<configuration>
					<encoding>${project.build.sourceEncoding}</encoding>
					<source>${maven.compiler.sourceLevel}</source>
					<target>${maven.compiler.sourceLevel}</target>
					<debug>${maven.compiler.debug}</debug>
					<showWarnings>true</showWarnings>
					<verbose>${maven.compiler.verbose}</verbose>
					<fork>false</fork>
					<maxmem>1024m</maxmem>
					<!-- to remove all APT processing and used maven-annotation-plugin <compilerArgument>-proc:none</compilerArgument> -->
					<!-- <compilerArguments> <endorseddirs>${endorsed.dir}</endorseddirs>
						</compilerArguments> -->
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<!-- pokud to bude true, pak proste nevytvori jar a selze to v dependencich
						u dalsich projektu -->
					<skipIfEmpty>false</skipIfEmpty>
					<archive>
						<manifest>
							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
							<!-- <addClasspath>true</addClasspath> -->
						</manifest>
						<manifestEntries>
							<Implementation-Environment>${env}</Implementation-Environment>
							<!-- <Implementation-Build>${buildNumber}</Implementation-Build> -->
							<Build-Time>${buildNumberTimestamp}.${timestamp}</Build-Time>
							<Implementation-Build>${buildNumberScmRevision}</Implementation-Build>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<!-- Java EE 7 doesn't require web.xml, Maven needs to catch up! -->
					<failOnMissingWebXml>false</failOnMissingWebXml>
					<warName>${project.groupId}.${project.artifactId}</warName>
				</configuration>
			</plugin>

			<plugin>
				<!-- http://maven.apache.org/plugins/maven-ear-plugin/modules.html#webModule -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-ear-plugin</artifactId>
				<version>2.10.1</version>
				<configuration>
					<!-- Tell Maven we are using Java EE 7 -->
					<version>7</version>
					<!-- Use Java EE ear libraries as needed. Java EE ear libraries are
						in easy way to package any libraries needed in the ear, and automatically
						have any modules (EJB-JARs and WARs) use them -->
					<defaultLibBundleDir>lib</defaultLibBundleDir>
					<modules>
						<!-- Default context root of the web app is /wildfly-wicket-ear-web.
							If a custom context root is needed, uncomment the following snippet to register
							our War as a web module and set the contextRoot property -->
						<!-- <webModule> <groupId>cz.rkr.notes</groupId> <artifactId>war</artifactId>
							<contextRoot>/notes</contextRoot> </webModule> -->
					</modules>
					<fileNameMapping>no-version</fileNameMapping>
				</configuration>
			</plugin>

			<!-- kdyz bude potreba,tak dat dalsi adresare pro source <plugin> <groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId> <version>1.8</version>
				<executions> <execution> <id>add-source</id> <goals> <goal>add-source</goal>
				</goals> <configuration> <sources> <source>${generated-source-dir}</source>
				</sources> </configuration> </execution> <execution> <id>add-test-source</id>
				<goals> <goal>add-test-source</goal> </goals> <configuration> <sources> <source>${generated-test-source-dir}</source>
				</sources> </configuration> </execution> </executions> </plugin> -->

			<!-- ====================================================================================== -->
			<!-- =================== HELPER plugins for documentation ================================= -->
			<!-- ====================================================================================== -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-site-plugin</artifactId>
				<version>3.4</version>
				<configuration>
					<inputEncoding>${project.build.sourceEncoding}</inputEncoding>
					<outputEncoding>${project.build.sourceEncoding}</outputEncoding>
					<generateSitemap>true</generateSitemap>
					<reportPlugins>
						<plugin>
							<groupId>org.codehaus.mojo</groupId>
							<artifactId>cobertura-maven-plugin</artifactId>
						</plugin>
					</reportPlugins>
				</configuration>
				<dependencies>
					<dependency><!-- add support for ssh/scp -->
						<groupId>org.apache.maven.wagon</groupId>
						<artifactId>wagon-ssh</artifactId>
						<version>2.6</version>
					</dependency>
				</dependencies>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.19</version>
				<configuration>
					<includes>
						<include>**/*Test.class</include>
					</includes>
					<excludes>
						<exclude>**/Abstract*</exclude>
					</excludes>
					<!-- <argLine> -javaagent:${settings.localRepository}/org/springframework/spring-agent/${spring.version}/spring-agent-${spring.version}.jar
						</argLine> -->
					<!-- for TestNG run only this groups -->
					<groups>integrationTest</groups>
					<!-- use paralelism for runing tests -->
					<parallel>methods</parallel>
					<threadCount>10</threadCount>
					<!-- use 3 separate JVM processes: WE DO NOT WANT TO DO THAT!!! because
						this will slow down building process to always instantiate SPRING again and
						again. on some special machine we may configure this to fork to test background
						jobs for example. <forkCount>3</forkCount> -->
					<forkCount>1</forkCount>
					<reuseForks>true</reuseForks>
					<argLine>-Xmx1024m</argLine>
					<!-- <databaseSchema>MY_TEST_SCHEMA_${surefire.forkNumber}</databaseSchema> -->
					<systemPropertyVariables>
						<testProperty>propertyValue</testProperty>
						<trestBuildDirectory>${project.build.directory}</trestBuildDirectory>
					</systemPropertyVariables>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-release-plugin</artifactId>
				<version>2.5.3</version>
				<configuration>
					<!--
						During release:perform, enable the "release" profile
					-->
					<releaseProfiles>release</releaseProfiles>
				</configuration>
			</plugin>

		</plugins>

		<pluginManagement>
			<!-- https://docs.jboss.org/wildfly/plugins/maven/latest/deploy-mojo.html -->
			<plugins>
				<plugin>
					<groupId>org.wildfly.plugins</groupId>
					<artifactId>wildfly-maven-plugin</artifactId>
					<version>1.1.0.Alpha5</version>
					<inherited>true</inherited>
					<configuration>
						<!-- Due to Maven's lack of intelligence with EARs we need to configure
							the wildfly maven plugin to skip deployment for all modules. We then enable
							it specifically in the ear module. -->
						<skip>true</skip>
						<hostname>${version.jboss.deployment.hostname}</hostname>
						<port>${version.jboss.deployment.port}</port>
						<username>${version.jboss.deployment.username}</username>
						<password>${version.jboss.deployment.password}</password>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>

	</build>

	<reporting>
		<plugins>
			<!-- Normally, we take off the dependency report, saves time. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-project-info-reports-plugin</artifactId>
				<version>2.8.1</version>
				<configuration>
					<dependencyLocationsEnabled>false</dependencyLocationsEnabled>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>cobertura-maven-plugin</artifactId>
				<version>2.7</version>
				<configuration>
					<formats>
						<format>html</format>
						<format>xml</format>
					</formats>
				</configuration>
			</plugin>
		</plugins>
	</reporting>

	<profiles>
		<profile>
			<id>generate-code-sources</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>
				<plugins>
					<!-- build sources artifact for repository deployment -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-source-plugin</artifactId>
						<version>2.4</version>
						<executions>
							<execution>
								<id>attach-sources</id>
								<goals>
									<goal>jar</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>release</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>buildnumber-maven-plugin</artifactId>
						<version>1.4</version>
						<executions>
							<!-- two executions are required to properly set up a revision as
								there is (potential) bug in plugin; once formatting is used, there is no
								way to obtain the revision number -->
							<execution>
								<id>scm-revision</id>
								<phase>generate-resources</phase>
								<goals>
									<goal>create</goal>
								</goals>
								<configuration>
									<buildNumberPropertyName>buildNumberScmRevision</buildNumberPropertyName>
									<getRevisionOnlyOnce>true</getRevisionOnlyOnce>
									<revisionOnScmFailure>scmRevisionNotSet</revisionOnScmFailure>
								</configuration>
							</execution>
							<execution>
								<id>timestamp</id>
								<phase>generate-resources</phase>
								<goals>
									<goal>create</goal>
								</goals>
								<configuration>
									<buildNumberPropertyName>buildNumberTimestamp</buildNumberPropertyName>
									<format>{0,date,yyyy-MM-dd}</format>
									<items>
										<item>timestamp</item>
									</items>
									<getRevisionOnlyOnce>true</getRevisionOnlyOnce>
									<revisionOnScmFailure>timestampNotSet</revisionOnScmFailure>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>cobertura-test-coverage</id>
			<activation>
				<property>
					<name>cobertura</name>
					<value>generation</value>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>cobertura-maven-plugin</artifactId>
						<version>2.7</version>
						<configuration>
							<instrumentation>
								<!-- <includes> <include>cz/rkr/**/*.class</include> </includes>
									<ignores> <ignore>com.adobe.idp.services.*</ignore> </ignores> -->
								<excludes>
									<exclude>cz/rkr/**/*Test.class</exclude>
								</excludes>
							</instrumentation>
							<quiet>false</quiet>
						</configuration>
						<executions>
							<execution>
								<id>clean</id>
								<!-- <phase>process-classes</phase> -->
								<phase>pre-site</phase>
								<goals>
									<goal>clean</goal>
								</goals>
								<!-- <configuration> <attach>true</attach> </configuration> -->
							</execution>
							<!-- <execution> <id>instrument</id> <phase>site</phase> <goals> <goal>instrument</goal>
								<goal>cobertura</goal> </goals> </execution> -->
							<!-- not needed when run 'mvn cobertura:cobertura' <execution> <id>report-generation</id>
								<goals> <goal>cobertura</goal> </goals> <configuration> <attach>true</attach>
								</configuration> </execution> -->
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

</project>
